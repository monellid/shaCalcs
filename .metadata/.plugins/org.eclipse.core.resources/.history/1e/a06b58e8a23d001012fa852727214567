package org.gem.correlationmodels;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.opensha.commons.data.Site;
import org.opensha.commons.geo.LocationUtils;

public class correlationModelsHelper {
	
    /**
     * Compare two sites in terms of their distance with respect to a reference
     * site.
     */
    private final class SiteComparator implements Comparator {

        private final Site referenceSite;

        public SiteComparator(Site referenceSite) {
            this.referenceSite = referenceSite;
        }

        @Override
        /**
         * site1 is less than site2 if distance between site1 and referenceSite
         * is less then distance between site2 and referenceSite. 
         * They are equal if they have the same distance. site1 is greater than
         * site2 if distance between site1 and referenceSite is greater then 
         * distance between site2 and referenceSite.
         */
        public int compare(Object site1, Object site2) {
            Site s1 = (Site) site1;
            Site s2 = (Site) site2;
            double dist_s1 =
                    LocationUtils.horzDistance(referenceSite.getLocation(),
                            s1.getLocation());
            double dist_s2 =
                    LocationUtils.horzDistance(referenceSite.getLocation(),
                            s2.getLocation());
            if (dist_s1 < dist_s2) {
                return -1;
            } else if (dist_s1 == dist_s2) {
                return 0;
            } else if (dist_s1 > dist_s2) {
                return +1;
            }
            return 0;
        }
    };
    
    /**
     * Sort (in ascending order) sites in a list according to their distance 
     * with respect to a reference site (referenceSite)
     */
    public static void orderSites(List<Site> sites, Site referenceSite) {
        Collections.sort(sites, new correlationModelsHelper().
        		new SiteComparator(referenceSite));
    }

}
